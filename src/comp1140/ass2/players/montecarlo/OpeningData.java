package comp1140.ass2.players.montecarlo;

import java.io.*;
import java.util.Arrays;
import java.util.StringTokenizer;

/**
 * This class extracts data from results generated by FirstTwoTurnsLearning class.
 * Authored by Dillon Chen
 */
public class OpeningData {
    public static void main(String[] args) throws IOException {
        BufferedReader in = new BufferedReader(new FileReader("learning_results/learning_12_10_2019_204036.txt"));
        PrintWriter results = new PrintWriter(new BufferedWriter(new FileWriter("learning_results/agamemnon_strategy_2.txt")));

        Tuple[][] turn = new Tuple[8][32];

        while (true) {
            String result = in.readLine();
            if (result == null) break;

            StringTokenizer s = new StringTokenizer(result);
            String tile = s.nextToken();
            char tileType = tile.charAt(1);
            String nodeID = tile.substring(2);
            int score = Integer.parseInt(s.nextToken());

            turn[tileType - 'a'][Integer.parseInt(nodeID)] = new Tuple(nodeID, score);
        }

        for (int i = 0; i < turn.length; i++) {
            Arrays.sort(turn[i]);
            results.print("{");
            for (int j = 0; j < turn[0].length; j++) {
                String nodePrint = turn[i][j].nodeID;
                if (nodePrint.charAt(0) == '0') {
                    nodePrint = " "+nodePrint.substring(1);
                }
                results.print(nodePrint);
                if (j != turn[0].length - 1) {
                    results.print(", ");
                }
            }
            results.println("}");
        }

        results.close();
    }

    private static class Tuple implements Comparable<Tuple> {
        String nodeID;
        int score;

        Tuple(String nodeID, int score) {
            this.nodeID = nodeID;
            this.score = score;
        }

        @Override
        public String toString() {
            return "("+nodeID+", "+score+")";
        }

        @Override
        public int compareTo(Tuple o) {
            return o.score - this.score; // sort in descending order
        }
    }
}
